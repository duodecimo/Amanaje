#!/usr/bin/env python
# by duo July 2018

import tkinter
import cv2
import pyscreenshot as ImageGrab
from tkinter.colorchooser import askcolor
from tkinter import messagebox
from PIL import Image,ImageDraw, ImageTk
from datetime import datetime
import os
import shutil

class App:

    DEFAULT_PEN_SIZE = 5.0
    DEFAULT_COLOR = 'black'

    def __init__(self, window, window_title, video_source=-1):
        self.PEN = 0
        self.OVAL = 1
        self.RECT = 2
        # delay is used by update function
        self.delay = 25
        self.window = window
        self.video_source = video_source
        window.bind('<Escape>', lambda e: window.quit())
        self.window.title(window_title)
        self.screen_width = self.window.winfo_screenwidth()
        self.screen_height = self.window.winfo_screenheight() - 50

        # Create a canvas
        self.frame = tkinter.Frame()
        self.frame.pack(side = 'top', fill = 'both')
        self.canvas = tkinter.Canvas(window, bg='white', width = self.screen_width, height = self.screen_height)
        self.imagecanvas=Image.new("RGB",(self.screen_width,self.screen_height),(255,255,255))
        self.drawcanvas=ImageDraw.Draw(self.imagecanvas)
        #self.canvas.grid(row=1, columnspan=7)
        self.canvas.pack()
        self.kinds = [self.canvas.create_line, self.canvas.create_oval, self.canvas.create_rectangle]
        self.webcam_button = tkinter.Button(self.frame, text='webcam', command=self.toggle_webcam)
        self.webcam_button.pack(side="left", padx=4, pady=1)
        self.webcam_capturing = False
        self.record_button = tkinter.Button(self.frame, text='record', command=self.toggle_record)
        self.record_button.pack(side="left", padx=4, pady=1)
        self.recording = False
        self.setup_paint()
        self.assure_path_exists("/tmp/amanajeMovieImages/")
        if messagebox.askyesno("Movie", "Clear folder /tmp/amanajeMovieImages?"):
            shutil.rmtree('/tmp/amanajeMovieImages/')
            self.assure_path_exists("/tmp/amanajeMovieImages/")
        self.update()
        self.window.mainloop()

    def assure_path_exists(self, path):
        dir = os.path.dirname(path)
        if not os.path.exists(dir):
                os.makedirs(dir)

    def snapshot(self):
        # Get a frame from the video source
        ret, frame = self.vid.get_frame()

        if ret:
            cv2.imwrite("frame-" + datetime.now().strftime("%H:%M:%S.%f") + ".jpg", cv2.cvtColor(frame, cv2.COLOR_RGB2BGR))

    def update(self):
        if self.webcam_capturing:
            # Get a frame from the video source
            ret, frame = self.vid.get_frame()
            if ret:
                self.photo = ImageTk.PhotoImage(image = Image.fromarray(frame))
                self.canvas.create_image(self.screen_width - (self.video_width+20), self.screen_height - (self.video_height+20), tags='cam_tag', image = self.photo, anchor = tkinter.NW)
                #do it on image canvas too
                offset =  (self.screen_width - (self.video_width+20), self.screen_height - (self.video_height+20))
                self.imagecanvas.paste(Image.fromarray(frame), offset)
        if self.recording:
            #save canvas to file
            filename = "/tmp/amanajeMovieImages/frame-" + datetime.now().strftime("%H:%M:%S.%f") + ".jpg"
            self.imagecanvas.save(filename)
        # next update loop
        self.window.after(self.delay, self.update)

    def toggle_webcam(self):
        if not self.webcam_capturing:
            self.webcam_capturing = not self.webcam_capturing
            self.webcam_button.config(relief=tkinter.SUNKEN)
            self.video_width = 320
            self.video_height = 240
            # open video source (by default this will try to open the computer webcam)
            self.vid = MyVideoCapture(self.video_width, self.video_height, self.video_source)
            # After it is called once, the update method will be automatically called every delay milliseconds
        else:
            self.webcam_capturing = not self.webcam_capturing
            self.webcam_button.config(relief=tkinter.RAISED)
            self.canvas.delete('cam_tag')
            offset =  (self.screen_width - (self.video_width+20), self.screen_height - (self.video_height+20))
            self.imagecanvas.paste(Image.new("RGB",(self.video_width,self.video_height),(255,255,255)), offset)
            del self.vid

    def toggle_record(self):
        self.recording = not self.recording
        if self.recording:
            self.record_button.config(relief=tkinter.SUNKEN)
        else:
            self.record_button.config(relief=tkinter.RAISED)

    def setup_paint(self):

        self.kind = self.PEN
        self.pen_button = tkinter.Button(self.frame, text='pen', command=self.use_pen)
        self.pen_button.pack(side="left", padx=4, pady=1)

        self.oval_button = tkinter.Button(self.frame, text='oval', command=self.use_oval)
        self.oval_button.pack(side="left", padx=4, pady=1)

        self.rect_button = tkinter.Button(self.frame, text='rectangle', command=self.use_rect)
        self.rect_button.pack(side="left", padx=4, pady=1)

        self.color_button = tkinter.Button(self.frame, text='color', command=self.choose_color)
        self.color_button.pack(side="left", padx=4, pady=1)

        self.eraser_button = tkinter.Button(self.frame, text='eraser', command=self.use_eraser)
        self.eraser_button.pack(side="left", padx=4, pady=1)

        self.choose_size_button = tkinter.Scale(self.frame, from_=1, to=10, orient=tkinter.HORIZONTAL)
        self.choose_size_button.pack(side="left", padx=4, pady=1)

        self.snapshot_button = tkinter.Button(self.frame, text='snapshot', command=self.snapshot)
        self.snapshot_button.pack(side="left", padx=4, pady=1)

        self.old_x = None
        self.old_y = None
        self.line_width = self.choose_size_button.get()
        self.color = self.DEFAULT_COLOR
        self.eraser_on = False
        self.active_button = self.pen_button
        self.canvas.bind('<ButtonPress-1>', self.onStart)
        self.canvas.bind('<B1-Motion>', self.paint)
        self.canvas.bind('<ButtonRelease-1>', self.reset)

    def use_pen(self):
        self.activate_button(self.pen_button)
        self.kind = self.PEN
        

    def use_oval(self):
        self.activate_button(self.oval_button)
        self.kind = self.OVAL

    def use_rect(self):
        self.activate_button(self.rect_button)
        self.kind = self.RECT

    def choose_color(self):
        self.eraser_on = False
        self.color = askcolor(color=self.color)[1]

    def use_eraser(self):
        self.activate_button(self.eraser_button, eraser_mode=True)

    def activate_button(self, some_button, eraser_mode=False):
        self.active_button.config(relief=tkinter.RAISED)
        some_button.config(relief=tkinter.SUNKEN)
        self.active_button = some_button
        self.eraser_on = eraser_mode

    def onStart(self, event):
        self.start = event
        self.drawn = None

    def paint(self, event):
        self.line_width = self.choose_size_button.get()
        paint_color = 'white' if self.eraser_on else self.color
        if self.kind == self.PEN:
            if self.old_x and self.old_y:
                #if self.drawn: canvas.delete(self.drawn)
                #self.objectId = 
                self.canvas.create_line(self.old_x, self.old_y, event.x, event.y, width=self.line_width, fill=paint_color, capstyle=tkinter.ROUND, smooth=tkinter.TRUE, splinesteps=36)
                # do the same for the canvas image
                self.drawcanvas.line(((self.old_x,self.old_y),(event.x,event.y)), paint_color, self.line_width)
            self.old_x = event.x
            self.old_y = event.y
        else:
            if self.drawn:
                self.canvas.delete(self.drawn)
            self.shape = self.kinds[self.kind]
            self.objectId = self.shape(self.start.x, self.start.y, event.x, event.y,  width=self.line_width, outline=paint_color)
            self.drawn = self.objectId

    def reset(self, event):
        self.old_x, self.old_y = None, None


class MyVideoCapture:
    def __init__(self, video_width, video_height, video_source=-1):
        # Open the video source
        self.vid = cv2.VideoCapture(video_source)
        if not self.vid.isOpened():
            raise ValueError("Unable to open video source", video_source)

        # Get video source width and height
        self.vid.set(cv2.CAP_PROP_FRAME_WIDTH, video_width)
        self.vid.set(cv2.CAP_PROP_FRAME_HEIGHT, video_height)

    def get_frame(self):
        if self.vid.isOpened():
            ret, frame = self.vid.read()
            if ret:
                # Return a boolean success flag and the current frame converted to BGR
                return (ret, cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
            else:
                return (ret, None)
        else:
            return (ret, None)

    # Release the video source when the object is destroyed
    def __del__(self):
        if self.vid.isOpened():
            self.vid.release()

# Create a window and pass it to the Application object
App(tkinter.Tk(), "Amanaj√©")
